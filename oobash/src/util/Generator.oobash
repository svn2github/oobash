##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>

#########################
#########################
##                     ##
##      GENERATOR      ## 
##                     ##
#########################
#########################

Class.generator() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   if (( $# >= 2 )); then
      # check for valid class name
      local userClass="$1"
      shift
      eval local \'"$userClass"\'=test 2>/dev/null
      if (( $? != 0 )); then
         I18n.err.println "Sorry, no valid classname: '\$userClass'"
         return 1
      fi         
      
      declare -a getters
      # check for valid attribute name + generate array of getters
      declare -a  attributes=("$@")
      declare -i i
      for ((i=0; i < ${#attributes[@]}; i++))
      do
         eval local \'"${attributes[$i]}"\'=test 2>/dev/null
         if (( $? != 0 )); then
            local attribute="${attributes[$i]}"
            I18n.err.println "Sorry, no valid attribute name: '\$attribute'"
            return 1
         else
            getters+=("get$(__strUpper ${userClass:0:1})${userClass:1}$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}")
         fi             
      done

      local user=${__AUTHOR__:-$USER}
      local mail=${__EMAIL__:-$user}
      local destination=""${__OODIR__}"/src/myClassFiles/${userClass}.oobash"
      System.out.println "#############################################################
# Author:  $user
# Date:    $(date $(__localDateFormat) 2>/dev/null)
# License: The MIT License"> "${destination}"
      if $(declare -p __COMPANY__ 2>/dev/null 1>&2); then
         System.out.println "# Company: ${__COMPANY__}">>"${destination}"
      fi
System.out.println "# Copyright (c) <$(date +%Y 2>/dev/null)> <${mail}>
#############################################################

 
# Definition of ${userClass} method array for inheritance actions
declare -a __${userClass}Methods__=($(echo ${getters[@]}))

# Definition of ${userClass} method array:
declare -a __${userClass}__=(\${__${userClass}Methods__[@]} \${__ObjectMethods__[@]})
" >> "${destination}"

###############################
# Create constructor function:#
###############################

declare -i length=$(( ${#userClass} ))
local line
printf -v line '%*s' "$length"
local frame1="$(System.out.println "${line// /#}")"
local frame2="$(System.out.println "${line// / }")"

System.out.println "
###$frame1###
###$frame1###
## $frame2 ##
## ${userClass^^} ##
## $frame2 ##
###$frame1###
###$frame1###

#########################
#                       #
#      CONSTRUCTOR      # 
#                       #
#########################

$userClass() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   if (( \$# == $((${#attributes[@]} + 1 )) )); then
      local this=\"\$1\"" >> "${destination}"
      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "      local ${attributes[$i]}=\"\$$(( i + 2 ))\"" >> "${destination}"
      done
      System.out.println "
      __isObjectnameValid 
      returnValue=\$?
      if (( \$returnValue == 0 )); then
         local pointer=\$((__OBJCOUNTER__++))
         local class=\"\${FUNCNAME}\"

         __destruct \"\${this}\"

         __alias \"\${this}\" \"\${FUNCNAME}\"
         " >> "${destination}"

      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "         __attribute ${attributes[$i]} \"\${${attributes[$i]}}\"" >> "${destination}"
      done
      System.out.println "
      else
         __handleErrorMessage \"\${FUNCNAME}\" \"\${FUNCNAME}\"
      fi
   else
      __throw \"IllegalArgumentException\" \": Wrong number of arguments \$#\"
      returnValue=\$?
      __handleErrorMessage \"\${FUNCNAME}\" \"\${FUNCNAME}\"
   fi
   return \$returnValue
}
__registerClass $userClass
" >> "${destination}"

###########################
# Create getter functions:#
###########################

System.out.println "

#####################
#                   #
#      METHODS      # 
#                   #
#####################

" >> "${destination}"
      
local list="$(__wordSort $(printf '%s\n' ${attributes[@]}))"
local att
for att in ${list}
do
   System.out.println "__get$(__strUpper ${userClass:0:1})${userClass:1}$(__strUpper ${att:0:1})${att:1}() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   local class=\"\$2\"
   if (( \$# == 2 )); then
      local this=\"\$1\"
      local pointer
      pointer=\"\$(__getObjectPointer \"\${this}\")\"
      System.out.println \"\${__ATTRIBUTEPOOL__[\${pointer}@${att}]}\" 
   else
      __throw \"IllegalArgumentException\" \": Wrong number of arguments \$((\$#-2))\"
      returnValue=\$?
      __handleErrorMessage \"\${class}\" \"\${FUNCNAME:2}\"
   fi
   return \$returnValue
}
" >> "${destination}"
done
      
########################
# Create help function:#
########################

System.out.println "
complete -W  \"\$(echo \${__${userClass}__[@]}) all ${userClass}\" ${userClass}.help

#################
#               #
#     HELP      # 
#               #
#################

${userClass}.help() {  
   local printStream=\${printStream:-out}  
   if (( \$# == 0 )); then
      System.\${printStream}.println \"
                    Usage: ${userClass}.help all|methodname
                    Available methods:
                    -equals" >> "${destination}"
      list="$(__wordSort $(printf '%s\n' getClass $(for att in ${attributes[@]}; do printf '%s '  get${userClass}$(__strUpper ${att:0:1})${att:1}; done)))"
		for att in ${list}
		do
         System.out.println "                    -${att}" >> "${destination}" 
      done                      
System.out.println "                    -hashCode
                    -toString" >> "${destination}"
      System.out.println "                    Constructor: 
                    -${userClass}
      \" 
      return 0
   fi
   while ((\$#))
   do
      local match=\$(Boolean.FALSE)
      case \$1 in
         ${userClass}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               ${userClass}
                  Constructor for the ${userClass} objects.
               Parameters:
                  objectname" >> "${destination}"

      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "                  <${attributes[$i]}>" >> "${destination}"
      done
   System.out.println "              Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != $((${#attributes[@]}+1))
                                           - if objectname is not valid
                                           - if objectname is a keyword
                                           - if objectname contains full stop character
                                           - if objectname contains slash character
               Example:" >> "${destination}"
   System.out.print "                  ${userClass} a " >> "${destination}"
   for (( i=0; i < ${#attributes[@]}; i++))
   do
      System.out.print  "<${attributes[$i]}> " >> "${destination}"
   done
   System.out.println "
            \";;& 
         equals|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               equals
                  Returns true if and only if the argument is a ${userClass} object that 
                  represents the same ${userClass} value as this object. 
               Parameters:
                  anObject - The object to compare this ${userClass} against
               Returns:
                  true if the ${userClass} objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  ${userClass} c $(eval echo {1..${#attributes[@]}})
                  b.equals c
                  >>>true
            \";;&" >> "${destination}"   
for getter in ${list}
do
   if [[ "${getter}" != "getClass" ]]; then
      declare -i count=0
      declare -a values=($(eval echo {1..${#attributes[@]}}))
      declare -i offset=$(( 3 + ${#userClass} ))
      local att=${getter:$offset}
      
      # ++keycount is the result of the getter example
      declare -i keycount
      for (( keycount=0; keycount < ${#attributes[@]}; keycount++))
      do
         if [[ ${getters[keycount]} == ${getter} ]]; then
            break
         fi
      done 
       
      System.out.println "         ${getter}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               ${getter}
                  Returns the value of ${att,,}.
               Parameters:
                  None
               Returns:
                  The value of ${att,,}.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.${getter}
                  >>>$(( ++keycount ))
            \";;& " >> "${destination}"
      ((count++))
   else
      System.out.println "         getClass|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.getClass
                  >>>class ${userClass}
            \";;&	">> "${destination}"
   fi
done      
   System.out.println "         hashCode|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               hashCode
                  Returns a hash code for this ${userClass} object.
               Parameters:
                  None
               Returns:
                  a hash code for this ${userClass}.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.hashCode
            \";;&
         toString|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               toString
                  Returns a String object representing this ${userClass} object in sorted order. 
               Parameters:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.toString" >> "${destination}"
      declare -a special=($(__wordSort $(echo "${attributes[@]}")))
      System.out.print "                  >>>" >> "${destination}"
      for (( i=0; i < ${#special[@]}; i++))
      do
         if (( $i != 0 )); then
            System.out.print                 \|\<"${special[$i]}"\> >> "${destination}"
         else
            System.out.print                 \<"${special[$i]}"\> >> "${destination}"
         fi
      done
   System.out.println "
            \";;&
         *)   if [[ \"\${match}\" == \"\$(Boolean.FALSE)\" ]]; then
                 System.\${printStream}.println \"                                  
                       No help found for \$1
                    \"   
              fi
              ;;& 
      esac               
      shift
   done 
}" >> "${destination}" 
      System.out.println "${destination}" 
      return 0       
   fi
   if __isatty STDERR; then
      System.err.println
      I18n.err.println "   Please enter one class name and the attributes"
      I18n.err.println "   Example:" 
      I18n.err.println "   Class.generator Person name age city" 
      I18n.err.println '   source ${__OODIR__}/src/myClassFiles/Person.oobash' 
      I18n.err.println "   Person a john 22 london"
      I18n.err.println "   a.getPersonAge"
      I18n.err.println "   >>>22" 
      I18n.err.println "   a.getClass"
      I18n.err.println "   >>>class Person"
      I18n.err.println "   a.getPersonName"
      I18n.err.println "   >>>john"
      I18n.err.println "   a.getPersonCity"
      I18n.err.println "   >>>london"
      System.err.println
   fi
   return 1   
}
__registerFunction Class.generator

Man.generator() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local base="$1"
   local type destination
   local user=${__AUTHOR__:-$USER}
   if (( $# == 1 )) && [[ ! -z $($1.help 2>/dev/null) ]]; then
      destination=""${__OODIR__}"/man/man3/${base}.3"
      type="classpage"
   elif (( $# == 1 )) && [[ -r ""${__OODIR__}"/scripts/$1" ]]; then
      destination=""${__OODIR__}"/man/man1/${base}.1"
      type="scriptpage"
   else
      if __isatty STDERR; then
         System.err.println
         I18n.err.println "   Please enter one class name or scriptname"
         I18n.err.println "   Example:"
         I18n.err.println "   Class.generator Person name age city"
         I18n.err.println '   source ${__OODIR__}/src/myClassFiles/Person.oobash'
         I18n.err.println "   Man.generator Person"
         I18n.err.println "   or"
         System.err.println "   Script.generator test.sh"
         System.err.println "   Man.generator test.sh"
         System.err.println
      fi
      return 1
   fi

      System.out.println "
.\\\" The MIT License
.\\\" Copyright (c) <$(date +%Y 2>/dev/null)> ${user}
.\\\"
.\\\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\\\" of this software and associated documentation files (the \"Software\"), to deal
.\\\" in the Software without restriction, including without limitation the rights
.\\\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\\\" copies of the Software, and to permit persons to whom the Software is
.\\\" furnished to do so, subject to the following conditions:
.\\\"
.\\\" The above copyright notice and this permission notice shall be included in
.\\\" all copies or substantial portions of the Software.
.\\\"
.\\\" THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\\\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\\\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\\\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\\\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISIN110G FROM,
.\\\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.\\\" THE SOFTWARE.
      " > "${destination}"

   case "${type}" in
      classpage)
         System.out.print ".TH oobash 3" >>"${destination}"
         System.out.print " \"$(date "+%d %b %Y" 2>/dev/null)\" bash4-Environment Framework Manuals" >> "${destination}"
         System.out.print " \""${__FILENAME__}"\"" >> "${destination}"
         System.out.println >> "${destination}"
         System.out.println ".SH NAME" >> "${destination}"
         for line in $($base.help)
         do
            if [[ "${line}" =~ ^.*-.*$ ]]; then
               for funcname in ${line}
               do
                  System.out.print "${funcname//-/} " >> "${destination}"
               done
            fi
         done
         System.out.println >>"${destination}"
         System.out.println ".SH DESCRIPTION" >> "${destination}"
         System.out.println "The ${base}.oobash file is part of the oobash framework." >> "${destination}"
         System.out.println ".SH EXAMPLES" >> "${destination}"

         local empty
         "${base}".help all | while IFS='' read -r line
         do
            if [[ "$(echo -n ${line//[:space:]]/})" == "" ]]; then
               empty="true"
               System.out.println "" >> "${destination}"
            else
               if [[ "${empty}" == "true" ]]; then
                  System.out.println ".B" >> "${destination}"
               fi
               System.out.println "${line}" >> "${destination}"
               empty="false"
            fi
         done

         System.out.println ".SH AUTHOR">>"${destination}"
         System.out.println "${user}" >> "${destination}"
         if $(declare -p __EMAIL__ 2>/dev/null 1>&2); then
            System.out.println ".SH BUG REPORTS">>"${destination}"
            System.out.println "Mail to ${__EMAIL__}" >> "${destination}"
         fi
      ;;
      scriptpage)
         if command -v pod2man  >/dev/null 2>&1; then
            pod2man -r "oobash ${__VERSION__}" -c "OOBASH Script" -d $(date $(__localDateFormat)) \
                  ""${__OODIR__}"/scripts/${base}" >> "${destination}"
         else
            __throw "NotInPathException" ": pod2man not in path"
            return $?
         fi
      ;;
   esac

   if (( $returnValue == 0 )); then
      if command -v gzip >/dev/null 2>&1; then
         gzip -f "${destination}"
         System.out.println "${destination}.gz"
      else
         System.out.println "${destination}"
      fi
   fi
   return $returnValue
}
__registerFunction Man.generator

Script.generator() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local scriptname="$(__basename $1)"
   if (( $# == 1 )) && [[ "${scriptname}" != "/" ]] ; then
      local user=${__AUTHOR__:-$USER}
      local destination="${__OODIR__}"/scripts/"${scriptname}"
      local interpreter
      if [[ ${0:0:1} != "/" ]]; then
         interpreter=${SHELL}
      else
         interpreter=${0}
      fi
      System.out.println '#!'${interpreter} > "${destination}"
      System.out.println "
source "${__OODIR__}"/oobash.source

# Please complete/customise the Plain Old Documentation below.

#######
# POD #
#######

: <<=cut =pod
=head1 NAME

$1 - describe here in few words 

=head1 SYNOPSIS

$1 [OPTIONS]

=head1 OPTIONS AND ARGUMENTS

--do
   :run the script

-h, --help
   :display this help and exit

-s, --stepper
   :enable code-stepping:
    Informs the user about what command is
    to be executed and waits for his
    confirmation to do so.
    
-S
   :same as -s, but functrace is set.
   So any traps on DEBUG are inherited by 
   shell functions -- really verbose.

-v, --version
   :output version information and exit

-x, --xtrace
   :sets script in xtrace mode

-X LOGFILE
   :sets script in xtrace mode and uses
    the given LOGFILE for xtrace output.
    BASH_XTRACEFD has to be available
    (bash version >= 4.1) and the LOGFILE
    has to be writeable. Problems cause the
    trace output to be sent to the standard
    error.

=head1 DESCRIPTION

Your description of $1

=head1 EXAMPLES

$1 --do

=head1 AUTHOR

Written by ${user}
">> "${destination}"
      if command -v date >/dev/null 2>&1; then
         System.out.println "=head1 HISTORY" >> "${destination}"
         System.out.println "" >> "${destination}"
               System.out.println "-Version 1.0:  $(date $(__localDateFormat))
               ">> "${destination}"
      fi
      if $(declare -p __COMPANY__ 2>/dev/null 1>&2); then
         System.out.println "=head1 COMPANY

${__COMPANY__}
">>"${destination}"
      fi
      if $(declare -p __EMAIL__ 2>/dev/null 1>&2); then
         System.out.println "=head1 BUG REPORTS

Mail to ${__EMAIL__}
">>"${destination}"
      fi
      System.out.println "=head1 SEE ALSO

oobash

=head1 LICENSE

The MIT License

=cut

#############
# FUNCTIONS #
#############

help() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i exitValue=0
   if (( \$# <= 1 )); then
      if (( \$# == 1 )); then
         if ! __isBashInteger \"\$1\"; then
            __throw \"IllegalArgumentException\" \": Illegal argument: \"\$1\"\"
            exitValue=\$?
            __handleErrorMessage
            System.exit \$exitValue
         else
            exitValue=\$1
         fi
      fi
      if command -v pod2usage >/dev/null 2>&1; then
         local out
         if (( \$exitValue == 0 )); then
            out='>&STDOUT'
         else
            out='>&STDERR'
         fi
         pod2usage -verbose 1 -output \$out \"\$0\"
      else
         __throw \"NotInPathException\" \": pod2usage not in path\"
         exitValue=\$?
         __handleErrorMessage
      fi
   else
      __throw \"IllegalArgumentException\" \": Wrong number of arguments \$#\"
      exitValue=\$?
      __handleErrorMessage
   fi
   System.exit \$exitValue || System.exit \$?
}

stepper() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   if [[ \"\$1\" == \"functrace\" ]]; then
      set -o functrace
   fi
   trap '(read -p \"[\${BASH_SOURCE##*/}:\${LINENO}] \${BASH_COMMAND}? \")' DEBUG
   return \$returnValue
}

version() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i exitValue=0
   if (( \$# == 0 )); then
      if command -v podselect >/dev/null 2>&1; then
         returnString=\"\$(podselect -section HISTORY \"\$0\")\"
         System.out.println \"\${returnString:7}\"
      else
         __throw \"NotInPathException\" \": podselect not in path\"
         exitValue=\$?
         __handleErrorMessage
      fi
   else
      __throw \"IllegalArgumentException\" \": Wrong number of arguments \$#\"
      exitValue=\$?
      __handleErrorMessage
   fi
   System.exit \$exitValue
}

xtrace() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   local tracefile fd
   tracefile=\"\$1\"
   if [[ -n \"\${tracefile}\" ]]; then
      if __isXTRACEFDAvailable; then
         fd=\"\$(__getFreeFD)\"
         if (( \$? == 0 )); then
            eval \"exec \${fd}>>\${tracefile}\"
            BASH_XTRACEFD=\"\${fd}\"
         fi
      fi
   fi
   __setPS4
   set -o xtrace
   return \$returnValue
}

##################
# OPTION PARSING #
##################

optionsFound=0
doMain=0
# You should implement an option to run your main code e.g.: --doIt
# Small getopts tutorial: http://wiki.bash-hackers.org/howto/getopts_tutorial :
optspec=\":hsSvxX:-:\"
while getopts \"\$optspec\" optchar
do
   optionsFound=1
   case \"\${optchar}\" in
      -)
         # long options:
         case \"\${OPTARG}\" in
            help)
               help
            ;;
            stepper)
               stepper
            ;;
            version)
               version
            ;;
            xtrace)
               xtrace
            ;;
            do)
               doMain=1
            ;;
            *)
               # -- -> end of options
               if [[ -z \"\${OPTARG}\" ]]; then
                  break
               fi

               System.err.println
               System.err.println \"Invalid option: --\${OPTARG}\"
               System.err.println
               help \${__ExceptionValues__[IllegalArgumentException]}
            ;;
         esac;;
      # short options:
      h)
         help
      ;;
      s)
         stepper
      ;;
      S)
         stepper \"functrace\"
      ;;
      v)
         version
      ;;
      x)
         xtrace
      ;;
      X)
         xtrace \"\$OPTARG\"
      ;;
     \?)
         System.err.println
         System.err.println \"Invalid option: -\${OPTARG}\"
         System.err.println
         help \${__ExceptionValues__[IllegalArgumentException]}
      ;;
      :)
         System.err.println
         System.err.println \"Option -\$OPTARG requires an argument.\"
         System.err.println
         help \${__ExceptionValues__[IllegalArgumentException]}
      ;;
   esac   
done

# To avoid accidents: exit if no options
if ((!optionsFound)); then
  help \${__ExceptionValues__[IllegalArgumentException]}
fi

########
# MAIN #
########

if ((doMain)); then
   # Now your code...
   System.out.println 
   System.out.println \"This is my script!\"
   System.out.println 
fi

###########
# FINALLY #
###########

# Close fd if logging xtrace mode
if [[ -n \"\$BASH_XTRACEFD\" ]]; then
   set +o xtrace
   eval \"exec \$BASH_XTRACEFD<&-\"
   unset BASH_XTRACEFD
fi
System.exit 0" >> "${destination}"
      chmod 755 "${destination}" 2>/dev/null
      System.out.println "${__OODIR__}/scripts/${scriptname}"
   else
      if __isatty STDERR; then
         System.err.println
         I18n.err.println "   Please enter one scriptname."
         I18n.err.println "   Example:" 
         System.err.println "   Script.generator script.sh" 
         System.err.println
      fi
      returnValue=1 
   fi
   return $returnValue
}
__registerFunction Script.generator
