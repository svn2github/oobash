#############################################################
# Author:  andreas.gregor.frank@googlemail.com
# Date:    2012-05-29
# License: The MIT License
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>
#############################################################

##################
##################
##              ##
##     SSH      ##
##              ##
##################
##################


#########################
#                       #
#      CONSTRUCTOR      #
#                       #
#########################

Ssh() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )) || (( $# == 4 )); then
      local this="$1"
      local name="$2"
      local user="$3"
      # Default port for ssh: 22
      local p="${4:-22}"

      if ! __isBashInteger "$p"; then
         __throw "IllegalArgumentException" ": Illegal argument: \"$p\" is no valid port number"
         returnValue=$?
         __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      else
         declare -i port="$p"
         if (( $port < 0 )) || (( $port >  65536 )); then     
            __throw "IllegalArgumentException" ": Illegal argument: \"$p\" is no valid port number"
            returnValue=$?
            __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
            return $returnValue
         fi
      fi

      __isObjectnameValid
      returnValue=$?
      if (( $returnValue != 0 )); then
         __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if command -v ssh >/dev/null 2>&1; then
         # Test for passwordless ssh login
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${name}" : 1>/dev/null 2>&1
         returnValue=$?
         if (( $returnValue != 0 )); then
            __throw "AuthException" ": no passwordless authentication possible with SshHost '${name}' and user '${user}' on port '${port}' "
            returnValue=$?
            __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
            return $returnValue
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi
 
      local pointer=$((__OBJCOUNTER__++))
      local class="${FUNCNAME}"

      __destruct "${this}"

      __alias "${this}" "${FUNCNAME}"

      __attribute name "${name}"
      __attribute user "${user}"
      __attribute port "${port}"

   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $#"
      returnValue=$?
      __handleErrorMessage "${FUNCNAME}" "${FUNCNAME}"
   fi
   return $returnValue
}
__registerClass Ssh

#####################
#                   #
#      METHODS      #
#                   #
#####################

__command() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local command="$3"
      if command -v ssh >/dev/null 2>&1; then
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command} 2>/dev/null"
         retValue=$?
         if (( $retValue != 0 )) && [[ -n "$PS1" ]]; then
            ssh -t -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command}"
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__connect() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      if command -v ssh >/dev/null 2>&1; then
         ssh -p "${port}" "${user}@${machine}"
         returnValue=$?
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__copy() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            # source
            local machine="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            # target 
            local targetMachine="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            
            local bool="$(Boolean.TRUE)"
            local targetFile="${5:-"$(__dirname "$file")"}"
           
            cmd1="cd -- \"$(dirname "$file")\" 2>/dev/null && tar -cf - \"$(basename "$file")\" 2>/dev/null"
            cmd2="cd -- \"$targetFile\" 2>/dev/null && tar -xf - 2>/dev/null"
            if command -v ssh >/dev/null 2>&1; then
               ssh -p "${port}" -q -o "BatchMode yes" "${user}"@"${machine}"  "$cmd1" | \
               ssh -p "${targetPort}" -q -o "BatchMode yes" "${targetUser}"@"${targetMachine}" "$cmd2"
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __handleErrorMessage "${class}" "${FUNCNAME:2}"
               return $returnValue
            fi

            for status in ${PIPESTATUS[@]}
            do
               if (( "$status" != 0 )); then
                  bool="$(Boolean.FALSE)"
                  break
               fi
            done
            
            if [[ "$(Boolean.parseBoolean "$bool")" == "$(Boolean.TRUE)" ]]; then
               Boolean.TRUE
            else
               Boolean.FALSE
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __handleErrorMessage "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__diffFile() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            local host="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            local targetHost="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            local targetFile="${5:-"$file"}"
            if command -v ssh >/dev/null 2>&1; then
               if command -v diff >/dev/null 2>&1; then
                  diff  <(ssh -n -p "${port}" "${user}"@"${host}" cat "${file}") \
                        <(ssh -n -p "${targetPort}" "${targetUser}"@"${targetHost}" cat "${targetFile}")
               else
                  __throw "NotInPathException" ": diff not in path"
                  returnValue=$?
                  __handleErrorMessage "${class}" "${FUNCNAME:2}"
               fi
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __handleErrorMessage "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __handleErrorMessage "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__diffFiletree() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            local host="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$(__stripPath "$3")"
            local targetHost="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            if (( $# == 5 )); then
               local targetFile="$(__stripPath "$5")"
            else
               local targetFile="${file}"
            fi
            if command -v ssh >/dev/null 2>&1; then
               if command -v diff >/dev/null 2>&1; then
                  diff  <(ssh -n -p "${port}" "${user}"@"${host}" "cd "${file}" && find . -print") \
                        <(ssh -n -p "${targetPort}" "${targetUser}"@"${targetHost}" "cd "${targetFile}" && find . -print")
               else
                  __throw "NotInPathException" ": diff not in path"
                  returnValue=$?
                  __handleErrorMessage "${class}" "${FUNCNAME:2}"
               fi
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __handleErrorMessage "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __handleErrorMessage "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__execModule() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local module="$3"
      local file="${__OODIR__}"/src/netservice/modules/"${module}"
      if [[ -r "${file}" ]]; then
         if [[ -f "${file}" ]]; then
            if command -v ssh >/dev/null 2>&1; then
               ssh -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" $(<"${file}")
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __handleErrorMessage "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "IOException" ":\"${file}\" is not a regular file"
            returnValue=$?
            __handleErrorMessage "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IOException" ": Cannot read file \"${file}\""
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshHost() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local pointer
      pointer="$(__getObjectPointer "${this}")"
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@name]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshPort() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local pointer
      pointer="$(__getObjectPointer "${this}")"
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@port]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshUser() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local pointer
      pointer="$(__getObjectPointer "${this}")"
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@user]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__grep() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local host="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      declare -i port="$("$this".getSshPort)"
      local grepPattern="$3"
      local file="$4"
      local showLineNumbers=${5:-true}
      if command -v ssh >/dev/null 2>&1; then
         local showLines
         if [[ "$(Boolean.parseBoolean "${showLineNumbers}")" == "$(Boolean.TRUE)" ]]; then
            showLines="-n"
         fi
         ssh -n -p "${port}" "${user}"@"${host}" grep -rH --colour=never ${showLines} "${grepPattern}" "${file}"
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__grepIgnoreCase() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local host="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      declare -i port="$("$this".getSshPort)"
      local grepPattern="$3"
      local file="$4"
      local showLineNumbers=${5:-true}
      if command -v ssh >/dev/null 2>&1; then
         local showLines
         if [[ "$(Boolean.parseBoolean "${showLineNumbers}")" == "$(Boolean.TRUE)" ]]; then
            showLines="-n"
         fi
         ssh -n -p "${port}" "${user}"@"${host}" grep -rHi --colour=never ${showLines} "${grepPattern}" "${file}"
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__grepInvertMatch() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local host="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      declare -i port="$("$this".getSshPort)"
      local grepPattern="$3"
      local file="$4"
      local showLineNumbers=${5:-true}
      if command -v ssh >/dev/null 2>&1; then
         local showLines
         if [[ "$(Boolean.parseBoolean "${showLineNumbers}")" == "$(Boolean.TRUE)" ]]; then
            showLines="-n"
         fi
         ssh -n -p "${port}" "${user}"@"${host}" grep -rHv --colour=never ${showLines} "${grepPattern}" "${file}"
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__vimEdit() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   local class="$2"
   declare -i returnValue=0
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local file="$3"
      if command -v vim >/dev/null 2>&1; then
         if command -v scp >/dev/null 2>&1; then
            vim scp://"${user}"@"${machine}":"${port}"/"${file}"
            returnValue=$?
         else
            __throw "NotInPathException" ": scp not in path"
            returnValue=$?
            __handleErrorMessage "${class}" "${FUNCNAME:2}"
         fi
      else
         __throw "NotInPathException" ": vim not in path"
         returnValue=$?
         __handleErrorMessage "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

complete -W  "$(echo ${__Ssh__[@]}) all Ssh" Ssh.help

#################
# help function #
#################

Ssh.help() {
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System."${printStream}".println "
                    Usage: Ssh.help all|methodname
                    Available methods:
                    -command -connect -copy -diffFile 
                    -diffFiletree -equals -execModule 
                    -getClass -getSshHost -getSshPort
                    -getSshUser -grep -grepIgnoreCase 
                    -grepInvertMatch -hashCode -toString 
                    -vimEdit
                    Constructor: 
                    -Ssh
      "
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         Ssh|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               Ssh
                  Constructor for the Ssh objects, checks if passwordless auth
                  is possible with name and user.
               Parameters:
                  objectname
                  <hostname>
                  <user>
                  [<port>] Default: 22
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 3 AND != 4
                                           - if objectname is not valid
                                           - if objectname is a keyword
                                           - if objectname contains full stop character
                                           - if objectname contains slash character
                                           - if port number is not valid
                  AuthException - if passwordless auth is not possible
               Example:
                  Ssh a <hostname> <user> [<port>]
            ";;&
         command|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               command
                  Calls given command on remote host.
                  If shell is interactive and the given command fails,
                  then this method tries the same command again, but
                  uses pseudo-tty allocation.
                  Stderr is reditrected to /dev/null, if shell is not interactive.
               Parameters:
                  command
               Returns:
                  command stdout output
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                  NotInPathException -if ssh not in path
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.command \"date\"
                  >>>Fr 1. Jun 14:35:36 CEST 2012
            ";;&
         connect|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               connect
                  Opens a ssh shell on remote host
               Parameters:
                  None
               Returns:
                  None.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
                  NotInPathException -if ssh not in path
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.connect
            ";;&
         copy|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               copy
                  Copies file or directory from this Ssh object to another.
                  All errors are redirected to /dev/null.
               Parameters:
                  File or directory
                  Destination Ssh object
                  [Destination directory] Default: First argument
               Returns:
                  true if successful, false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 2 AND != 3
                                           - if argument is no object
                  NotInPathException -if ssh not in path
                  WrongClassException - if argument is no Ssh object
               Example:
                  Ssh mymachine1 mymachine1 $USER
                  Ssh mymachine2 mymachine2 $USER
                  mymachine1.copy /etc/passwd mymachine2
                  >>>true
                  mymachine1.copy /opt/testdirectory mymachine2 /tmp
                  >>>true
            ";;&
         diffFile|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               diffFile
                  if the first [optional: and 3rd] argument defines a regular file, then
                  the output is a diff of the two files.
                  Stderr is not redirected.
               Parameters:
                  primititve file on this Ssh object
                  Ssh object
                  [primititve file on argument Ssh object] Default: file of argument 1
               Returns:
                  diff output
               Throws:
                  IllegalArgumentException: -if 2nd argument is no object
                                            -if number of arguments != 2 AND !=3
                  NotInPathException: -if diff is not in path
                                      -if ssh is not in path
                  WrongClassException: -if 2nd argument is an object but no Ssh object
               Example:
                  machine1.diffFile /etc/passwd machine2
                  machine1.diffFile /etc/passwd machine2 /etc/passwdcopy
            ";;&
         diffFiletree|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               diffFiletree
                  Compares the filetrees and returns the difference.
                  Stderr is not redirected.
               Parameters:
                  directory on this Ssh object
                  Ssh object
                  [directory on argument Ssh object] Default: First argument
               Returns:
                  differences in the filetree
               Throws:
                  IllegalArgumentException: -if 2nd argument is no object
                                            -if number of arguments != 2 AND !=3
                  NotInPathException: -if diff is not in path
                                      -if ssh is not in path
                  WrongClassException: -if 2nd argument is an object but no Ssh object
               Example:
                  machine1.diffFiletree /etc machine2
                  machine1.diffFiletree /opt machine2 /usr/local/opt
            ";;&
         equals|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               equals
                  Returns true if and only if the argument is a SshHost object that 
                  represents the same SshHost value as this object. 
               Parameters:
                  anObject - The object to compare this SshHost against
               Returns:
                  true if the SshHost objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  Ssh a 1 2 3
                  Ssh b 1 2 3
                  a.equals b
                  >>>true
            ";;&
         execModule|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               execModule
                  Looks for the module in the netservice/modules directory.
                  Executes given module on this Ssh object.
                  The module has to be readable and you do not have to
                  escape anything in the module.
               Parameters:
                  modulename
               Returns:
                  module output
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                  NotInPathException -if ssh not in path
                  IOException -if module is not a regular file
                              -if module is not readable
               Example:
                  Ssh mymachine mymachine $USER
                  mymachine.execModule example.mod
                  >>>$USER on mymachine
            ";;&
         getClass|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.getClass
                  >>>class Ssh
            ";;&
         getSshHost|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               getSshHost
                  Returns the value of name
               Parameters:
                  None
               Returns:
                  The value of name.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostName
                  >>>mymachine.mydom.org
            ";;&
         getSshPort|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               getSshPort
                  Returns the value of port (ssh-port)
               Parameters:
                  None
               Returns:
                  The value of port.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostPort
                  >>>22
                  Ssh mymachine mymachine.mydom.org mysshaccount 888
                  mymachine.getSshHostPort
                  >>>888
            ";;&
         getSshUser|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               getSshUser
                  Returns the value of user (ssh-user)
               Parameters:
                  None
               Returns:
                  The value of user.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostUser
                  >>>mysshaccount
            ";;&
         grep|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               grep
                  grep searches the given file (or recursive all files of the given directory)
                  for lines containing a match to the given pattern. By default, grep prints 
                  the matching lines.
                  Stderr is not redirected.
               Parameters:
                  grepPattern
                  file
                  [showLineNumbers] Default: true   
               Returns:
                  matching lines
               Throws:
                  IllegalArgumentException -if Wrong number of arguments
                  NotInPathException -if ssh not in path
               Example:
                  mymachine.grep root /etc/passwd
                  >>>/etc/passwd:1:root:x:0:0:root:/root:/bin/bash
                  >>>/etc/passwd:11:operator:x:11:0:operator:/root:/sbin/nologin
                  mymachine.grep root /etc/passwd false
                  >>>/etc/passwd:root:x:0:0:root:/root:/bin/bash
                  >>>/etc/passwd:operator:x:11:0:operator:/root:/sbin/nologin
            ";;&
         grepIgnoreCase|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               grepIgnoreCase
                  grepIgnoreCase searches the given file (or recursive all files of the given directory)
                  for lines containing a match to the given pattern. By default, grepIgnoreCase prints
                  the matching lines.
                  This method ignores case distinctions in the grepPattern.
                  Stderr is not redirected.
               Parameters:
                  grepPattern
                  file
                  [showLineNumbers] Default: true   
               Returns:
                  matching lines
               Throws:
                  IllegalArgumentException -if Wrong number of arguments
                  NotInPathException -if ssh not in path
               Example:
                  mymachine.grepIgnoreCase ROOT /etc/passwd
                  >>>/etc/passwd:1:root:x:0:0:root:/root:/bin/bash
                  >>>/etc/passwd:11:operator:x:11:0:operator:/root:/sbin/nologin
                  mymachine.grepIgnoreCase ROOT /etc/passwd false
                  >>>/etc/passwd:root:x:0:0:root:/root:/bin/bash
                  >>>/etc/passwd:operator:x:11:0:operator:/root:/sbin/nologin
            ";;&
         grepInvertMatch|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               grepInvertMatch
                  grepInvertMatch searches the given file (or recursive all files of the given directory)
                  for non-matching lines to the given pattern. By default, grepInvertMatch prints 
                  the non-matching lines.
                  Stderr is not redirected.
               Parameters:
                  grepPattern
                  file
                  [showLineNumbers] Default: true   
               Returns:
                  non-matching lines
               Throws:
                  IllegalArgumentException -if Wrong number of arguments
                  NotInPathException -if ssh not in path
               Example:
                  mymachine.grepInvertMatch : /etc/passwd
                  >>>
            ";;&
         hashCode|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               hashCode
                  Returns a hash code for this SshHost object.
               Parameters:
                  None
               Returns:
                  a hash code for this SshHost.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.hashCode
            ";;&
         toString|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               toString
                  Returns a String object representing this SshHost object in sorted order. 
               Parameters:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.toString
                  >>><name>|<port>|<user>
            ";;&
         vimEdit|all)
            match=$(Boolean.TRUE)
            System."${printStream}".println "
               vimEdit
                  Opens a remote file with the local vim
               Parameters:
                  None
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.vimEdit /etc/passwd
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System."${printStream}".println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}
